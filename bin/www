#!/usr/bin/env node
// jscs:disable requireCamelCaseOrUpperCaseIdentifiers
// jscs:disable requireCapitalizedComments
'use strict';

var debug = require('debug-log')('ION:www');
var path = require('path');
var http = require('http');
var express = require('express');
var ejsLocals = require('ejs-locals');
var flash = require('connect-flash');
var fs = require('fs');
var favicon = require('serve-favicon');

// Ротация логов или обычный логгер для developer режима
var FileStreamRotator = require('file-stream-rotator');
var logger = require('morgan');

var bodyParser = require('body-parser');
var methodOverride = require('method-override');

var config = require('../config');
var di = require('core/di');

/** Сервер http
 Для запуска NODE_PATH должна содержать путь к каталогу системы
 */

debug.info('Запускаем приложение ION');

var app = express();

global.app = app;

if (process.env.NODE_ENV !== 'development') {
  var logDirectory = path.join(__dirname, '../log');
  if (!fs.existsSync(logDirectory)) {
    fs.mkdirSync(logDirectory);
  }
  var accessLogStream = FileStreamRotator.getStream({
    filename: path.join(logDirectory, '/access-%DATE%.log'),
    frequency: 'daily',
    verbose: false,
    date_format: 'YYYY-MM-DD'
  });
  app.use(logger('combined', {stream: accessLogStream}));
} else {
  app.use(logger('dev'));
}

// Мидлвара сохранения сообщений в сессии перед редиректом
app.use(flash());

// Шаблонизатор

app.engine('ejs', ejsLocals);
app.set('views', path.join(__dirname, '../view/templates'));
app.set('view engine', 'ejs');
app.use(express.static(path.join(__dirname, '../view/static')));

// Типовые настройки

app.use(favicon(path.join(__dirname, '../view/static/favicon.ico')));

// Поддержка put и deletes
// override with different headers; last one takes precedence
app.use(methodOverride('X-HTTP-Method'));       // Microsoft
app.use(methodOverride('X-HTTP-Method-Override')); // Google/GData
app.use(methodOverride('X-Method-Override'));      // IBM

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));

// Редирект на дефолтный модуль
if (config.defaultModule) {
  app.get('/', function (req, res) {
    res.redirect('/' + config.defaultModule);
  });
}

// Создаем HTTP сервер.
var server = http.createServer(app);

// jshint maxstatements: 30
var onError = function (error) {
  debug.error(error);
  server.close(function (err) {
    process.exit(130);
  });
};

function start(ports, i) {
  return new Promise(function (resolve, reject) {
    server.once('error', function (err) {
      if (err.code !== 'EADDRINUSE') {
        return reject(err);
      }
      debug.info('Не удалось подключиться к порту ' + ports[i]);
      start(ports, i + 1).then(resolve).catch(reject);
    });
    if (i < ports.length) {
      server.listen(ports[i], resolve);
    } else {
      reject(new Error('Не удалось запустить сервер. Все указанные порты заняты'));
    }
  });
}

// Связываем приложение
di('app', config.di,
  {
    server: server,
    application: app
  }).
then(
  // Подключаем модули
  function () {
      return new Promise(function (resolve, reject) {
        var i, moduleInitiators;
        debug.info('Загрузка веб-модулей.');
        app.locals.sysMenu = [];
        moduleInitiators = [];
        try {
          var candidates = fs.readdirSync(path.join(__dirname, '../modules'));
          for (i = 0; i < candidates.length; i++) {
            if (fs.existsSync(path.join(__dirname, '../modules', candidates[i], 'web.js'))) {
              var module = require('modules/' + candidates[i] + '/web');
              if (typeof module === 'function') {
                if (module.locals.sysTitle) {
                  app.locals.sysMenu.push({
                    name: candidates[i],
                    description: module.locals.sysTitle
                  });
                }
                module.locals.sysMenu = app.locals.sysMenu;
                app.use(module);
                if (typeof module._init === 'function') {
                  moduleInitiators.push(module._init());
                }
                debug.info('Модуль ' + candidates[i] + ' загружен.');
              } else {
                debug.warn('Модуль ' + candidates[i] + ' не является приложением express.');
              }
            }
          }
        } catch (err) {
          reject(err);
        }
        if (moduleInitiators.length > 0) {
          Promise.all(moduleInitiators).then(resolve).catch(reject);
          return;
        }
        resolve();
      });
    }
).then(
  // Запускаем приложение
  function () {
      var ports = config.port;
      if (!(ports instanceof Array)) {
        ports = [config.port];
      }
      return start(ports, 0);
    }
).then(
  function () {
      server.on('error', onError);
      debug.info('Слушается ' + (typeof server.address() === 'string' ?
        'конвеер ' + server.address() :
        'порт ' + server.address().port));
    }
).catch(onError);
