#!/usr/bin/env node
// jscs:disable requireCamelCaseOrUpperCaseIdentifiers
// jscs:disable requireCapitalizedComments
'use strict';

const path = require('path');
const http = require('http');
const https = require('https');
const express = require('express');
const ejsLocals = require('ejs-locals');
const flash = require('connect-flash');
const fs = require('fs');

const bodyParser = require('body-parser');
const methodOverride = require('method-override');
const FileStreamRotator = require('file-stream-rotator');
const Morgan = require('morgan');


const config = require('../config');
const di = require('core/di');
const theme = require('lib/util/theme');

const IonLogger = require('core/impl/log/IonLogger');
const SettingsRepository = require('core/impl/SettingsRepository');

const errorSetup = require('core/error-setup');
errorSetup(config.lang || 'ru');

var sysLog = new IonLogger(config.log || {});

/** Сервер http
 Для запуска NODE_PATH должна содержать путь к каталогу системы
 */

sysLog.info('Запуск приложения ION');

var app = express();

global.app = app;

// TODO Access-лог надо реализовать через IonLogger
if (process.env.NODE_ENV !== 'development') {
  var logDirectory = path.join(__dirname, '../log');
  if (!fs.existsSync(logDirectory)) {
    fs.mkdirSync(logDirectory);
  }
  var accessLogStream = FileStreamRotator.getStream({
    filename: path.join(logDirectory, '/access-%DATE%.log'),
    frequency: 'daily',
    verbose: false,
    date_format: 'YYYY-MM-DD'
  });
  app.use(Morgan('combined', {stream: accessLogStream}));
} else {
  app.use(Morgan('dev'));
}

// Мидлвара сохранения сообщений в сессии перед редиректом
app.use(flash());

// Шаблонизатор

app.engine('ejs', ejsLocals);
app.set('view engine', 'ejs');

// Поддержка put и deletes
// override with different headers; last one takes precedence
app.use(methodOverride('X-HTTP-Method'));       // Microsoft
app.use(methodOverride('X-HTTP-Method-Override')); // Google/GData
app.use(methodOverride('X-Method-Override'));      // IBM

var limit = config.requestSizeLimit || '1mb';
app.use(bodyParser.text({type: 'text/*', limit: limit}));
app.use(bodyParser.json({type: 'application/json', limit: limit}));
app.use(bodyParser.urlencoded({extended: true, limit: limit}));
app.use(bodyParser.raw({limit: limit}));

// Создаем HTTP сервер.
var server = config.https ? https.createServer(config.https, app) : http.createServer(app);

// jshint maxstatements: 50, maxcomplexity: 25
var onError = function (error) {
  sysLog.error(error);
  server.close(function (err) {
    process.exit(130);
  });
};

function start(ports, i) {
  return new Promise(function (resolve, reject) {
    server.once('error', function (err) {
      if (err.code !== 'EADDRINUSE') {
        return reject(err);
      }
      sysLog.info('Не удалось подключиться к порту ' + ports[i]);
      start(ports, i + 1).then(resolve).catch(reject);
    });
    if (i < ports.length) {
      server.listen(ports[i], resolve);
    } else {
      reject(new Error('Не удалось запустить сервер. Все указанные порты заняты'));
    }
  });
}

function moduleLoader(name, module) {
  return function () {
    sysLog.info('Загрузка модуля ' + name);
    return module._init().then(function () {
      sysLog.info('Модуль ' + name + ' загружен.');
      return Promise.resolve();
    });
  };
}

// Связываем приложение
di('app', config.di,
  {
    server: server,
    application: app,
    sysLog: sysLog
  })
  .then(
  // Подключаем модули
  /**
   * @param {{}} scope
   * @param {SettingsRepository} [scope.settings]
   * @returns {Promise}
     */
  function (scope) {
    return di('plugins', scope.settings.get('plugins') || {}, {}, 'app')
      .then(() => {return scope;});
  })
  .then(function (scope) {
    var moduleTitles = {};
    try {
      // Тема оформления страниц аутентификации и регистрации
      theme(
        app, '',
        path.normalize(path.join(__dirname, '..')),
        scope.settings.get('theme') || config.theme || 'default', sysLog
      );

      scope.auth.setTopLevelAuth();

      // Редирект на дефолтный модуль
      var defaultModule = null;
      if (scope.settings && scope.settings instanceof SettingsRepository) {
        defaultModule = scope.settings.get('defaultModule');
        moduleTitles = scope.settings.get('moduleTitles') || {};
      }

      if (!defaultModule && config.defaultModule) {
        defaultModule = config.defaultModule;
      }

      if (defaultModule) {
        app.get('/', function (req, res) { res.redirect('/' + defaultModule); });
      } else {
        throw new Error('Не указан модуль по умолчанию!');
      }

      if (scope.fileStorage) {
        app.use(scope.fileStorage.middle());
      }
    } catch (err) {
      return Promise.reject(err);
    }

    var i, moduleInitiators;
    sysLog.info('Загрузка веб-модулей.');
    app.locals.sysMenu = [];
    moduleInitiators = null;
    try {
      var candidates = fs.readdirSync(path.join(__dirname, '../modules'));
      var skipModules = config.skipModules || [];
      for (i = 0; i < candidates.length; i++) {
        if (
          fs.existsSync(path.join(__dirname, '../modules', candidates[i], 'web.js')) &&
          skipModules.indexOf(candidates[i]) < 0
        ) {
          var module = require('modules/' + candidates[i] + '/web');
          if (typeof module === 'function') {
            var title = moduleTitles[candidates[i]] || module.locals.sysTitle;
            if (title) {
              app.locals.sysMenu.push(
                {
                  name: candidates[i],
                  description: title
                }
              );
              module.locals.sysTitle = title;
            }
            module.locals.sysMenu = app.locals.sysMenu;
            app.use(module);
            if (typeof module._init === 'function') {
              if (moduleInitiators) {
                moduleInitiators = moduleInitiators.then(moduleLoader(candidates[i], module));
              } else {
                moduleInitiators = moduleLoader(candidates[i], module)();
              }
            }
          } else {
            sysLog.warn('Модуль ' + candidates[i] + ' не является приложением express.');
          }
        }
      }
      for (let ref in moduleTitles) {
        if (moduleTitles.hasOwnProperty(ref) && typeof moduleTitles[ref] === "object" && moduleTitles[ref].url) {
          app.locals.sysMenu.push(
            {
              name: moduleTitles[ref].url,
              description: moduleTitles[ref].title || ref,
              external: true
            }
          );
        }
      }
    } catch (err) {
      return Promise.reject(err);
    }
    if (moduleInitiators) {
      return moduleInitiators.then(function () {
        sysLog.info('Все модули загружены.');
        return Promise.resolve();
      });
    }
    return Promise.resolve();
  })
  .then(
  // Запускаем приложение
    function () {
      let ports = config.port || [];
      if (ports && !Array.isArray(ports)) {
        ports = [ports];
      }
      if (ports.length === 0) {
        ports.push(config.https ? 443 : 80);
      }
      return start(ports, 0);
    }
  )
  .then(
    function () {
      server.on('error', onError);
      sysLog.info('Слушается ' + (typeof server.address() === 'string' ?
        'конвеер ' + server.address() :
        'порт ' + server.address().port));
    })
  .catch(onError);
