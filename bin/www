#!/usr/bin/env node
// jscs:disable requireCamelCaseOrUpperCaseIdentifiers
// jscs:disable requireCapitalizedComments
'use strict';

var i;
var debug = require('debug-log')('ION:www');
var path = require('path');
var http = require('http');
var express = require('express');
var ejsLocals = require('ejs-locals');
var session = require('express-session');
var flash = require('connect-flash');
var clone = require('clone');
var fs = require('fs');
var favicon = require('serve-favicon');

// Ротация логов или обычный логгер для developer режима
var FileStreamRotator = require('file-stream-rotator');
var logger = require('morgan');

var bodyParser = require('body-parser');
var methodOverride = require('method-override');

/** Сервер http
 * Инициирует сервер на порту, предварительно проверив что он свободный.
 * Вешает обработчик приложения на запросы app.js.
 * Для вывода сообщений от приложения:
 -все (log/info/warn/error)  SET DEBUG=ION:*
 -только ошибки              SET DEBUG=ION:*.error*
 -ошибки и предпреждения     SET DEBUG=ION:*.error*,ION:*.warn*
 -исключая ".log"            SET DEBUG=ION:*,-*|log:*

 Для запуска NODE_PATH должна содержать путь к каталогу системы

 */

var config = require('config');

// Ядро
var Datasources = require('core/datasources');
var AclMediator = require('core/access');
var MetaRepository = require('core/impl/meta/DsMetaRepository');
var DataRepository = require('core/impl/datarepository/ionDataRepository');
var KeyProvider = require('core/impl/meta/MongoMetaKeyProvider');

debug.info('Запускаем приложение ION');

var app = express();

global.app = app;

if (process.env.NODE_ENV !== 'development') {
  var logDirectory = path.join(__dirname, '../log');
  if (!fs.existsSync(logDirectory)) {
    fs.mkdirSync(logDirectory);
  }
  var accessLogStream = FileStreamRotator.getStream({
    filename: path.join(logDirectory, '/access-%DATE%.log'),
    frequency: 'daily',
    verbose: false,
    date_format: 'YYYY-MM-DD'
  });
  app.use(logger('combined', {stream: accessLogStream}));
} else {
  app.use(logger('dev'));
}

// DBAL

/**
 * @type {Datasources}
 */
var dataSources = new Datasources(config);
global.ionDataSources = dataSources;

// Проверка системных источников данных

var sessDs = dataSources.get(config.sessionDs);
if (!sessDs) {
  throw 'Не указан источник данных для сессий!';
}

var metaDs = dataSources.get(config.metaDs);
if (!metaDs) {
  throw 'Не указан источник данных мета-репозитория!';
}

var dataDs = dataSources.get(config.dataDs);
if (!dataDs) {
  throw 'Не указан источник данных репозитория объектов!';
}

// Модули аутентификации и безопасности

var auth = require('lib/auth');

/**
 * @type {AclMediator}
 */
global.ionAcl = new AclMediator(config);

// Мидлвара сохранения сообщений в сессии перед редиректом
app.use(flash());

// Шаблонизатор ВНЕЗАПНО не нужен
/*
 * app.engine('ejs', ejsLocals);
 * app.set('views', path.join(__dirname, '../view/templates'));
 * app.set('view engine', 'ejs');
 * app.use(express.static(path.join(__dirname, '../view/static')));
 */
// Типовые настройки

app.use(favicon(path.join(__dirname, '../view/static/favicon.ico')));

// Поддержка put и deletes
// override with different headers; last one takes precedence
app.use(methodOverride('X-HTTP-Method'));       // Microsoft
app.use(methodOverride('X-HTTP-Method-Override')); // Google/GData
app.use(methodOverride('X-Method-Override'));      // IBM

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));

// Редирект на дефолтный модуль
if (config.defaultModule) {
  app.get('/', function (req, res) {
    res.redirect('/' + config.defaultModule);
  });
}

// Создаем HTTP сервер.
var server = http.createServer(app);

server.on('close', function () { global.ionDataSources.disconnect(); });

var onError = function (error) {
  debug.error(error);
  process.exit(130);
};

function start(ports, i) {
  return new Promise(function (resolve, reject) {
    server.once('error', function (err) {
      if (err.code !== 'EADDRINUSE') {
        return reject(err);
      }
      debug.info('Не удалось подключиться к порту ' + ports[i]);
      start(ports, i + 1).then(resolve).catch(reject);
    });
    if (i < ports.length) {
      server.listen(ports[i], resolve);
    } else {
      reject(new Error('Не удалось запустить сервер. Все указанные порты заняты'));
    }
  });
}

// Подключаемся к источникам данных и в случае успеха запускаем приложение
dataSources.connect().then(
  function () {
    // Создаем репозиторий мета-данных
    try {
      app.metaRepo = new MetaRepository({
        Datasource: metaDs
      });
    } catch (err) {
      return onError(err);
    }
    // Инициализируем репозиторий мета-данных
    app.metaRepo.init().then(function () {
      var i, ports, err;
      try {
        // Создаем репозиторий данных
        var keyProvider = new KeyProvider(app.metaRepo, dataDs.connection());
        app.dataRepo = new DataRepository(dataDs, app.metaRepo, keyProvider);

        // Инициализируем сессии
        var sessOpts = clone(config.session || {});
        var MongoStore = require('connect-mongo')(session);
        sessOpts.store = new MongoStore({
          db: sessDs.connection(),
          ttl: 14 * 24 * 60 * 60
        });
        app.use(session(sessOpts));
        auth.init(app, config.auth);

        // Подключаем модули
        debug.info('Загрузка веб-модулей.');
        var candidates = fs.readdirSync(path.join(__dirname, '../modules'));
        for (i = 0; i < candidates.length; i++) {
          if (fs.existsSync(path.join(__dirname, '../modules', candidates[i], 'web.js'))) {
            var module = require('modules/' + candidates[i] + '/web');
            if (typeof module === 'function') {
              app.use(module);
              debug.info('Модуль ' + candidates[i] + ' загружен.');
            } else {
              debug.warn('Модуль ' + candidates[i] + ' не является приложением express.');
            }
          }
        }
      } catch (err) {
        return onError(err);
      }
      // Запускаем приложение
      ports = config.port;
      if (!(ports instanceof Array)) {
        ports = [config.port];
      }

      return start(ports, 0);
    }).then(function () {
      server.on('error', onError);
      debug.info('Слушается ' + (typeof server.address() === 'string' ?
        'конвеер ' + server.address() :
        'порт ' + server.address().port));
    }).catch(onError);
  }
).catch(onError);
